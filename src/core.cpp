#include "core.hpp"
#include "core_impl.hpp"

#include <memory>
#include <vector>

#include "opcode.hpp"
#include "state.hpp"

using std::make_unique;
using std::vector;

namespace chip8 {

const vector<vector<byte>> Core::FONT_SET{
    // clang-format off
    { // 0
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
        0x90, // 1, 0, 0, 1, 0, 0, 0, 0,
        0x90, // 1, 0, 0, 1, 0, 0, 0, 0,
        0x90, // 1, 0, 0, 1, 0, 0, 0, 0,
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
    },
    { // 1
        0x20, // 0, 0, 1, 0, 0, 0, 0, 0,
        0x60, // 0, 1, 1, 0, 0, 0, 0, 0,
        0x20, // 0, 0, 1, 0, 0, 0, 0, 0,
        0x20, // 0, 0, 1, 0, 0, 0, 0, 0,
        0x70, // 0, 1, 1, 1, 0, 0, 0, 0,
    },
    { // 2
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
        0x10, // 0, 0, 0, 1, 0, 0, 0, 0,
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
        0x80, // 1, 0, 0, 0, 0, 0, 0, 0,
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
    },
    { // 3
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
        0x10, // 0, 0, 0, 1, 0, 0, 0, 0,
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
        0x10, // 0, 0, 0, 1, 0, 0, 0, 0,
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
    },
    { // 4
        0x90, // 1, 0, 0, 1, 0, 0, 0, 0,
        0x90, // 1, 0, 0, 1, 0, 0, 0, 0,
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
        0x10, // 0, 0, 0, 1, 0, 0, 0, 0,
        0x10, // 0, 0, 0, 1, 0, 0, 0, 0,
    },
    { // 5
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
        0x80, // 1, 0, 0, 0, 0, 0, 0, 0,
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
        0x10, // 0, 0, 0, 1, 0, 0, 0, 0,
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
    },
    { // 6
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
        0x80, // 1, 0, 0, 0, 0, 0, 0, 0,
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
        0x90, // 1, 0, 0, 1, 0, 0, 0, 0,
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
    },
    { // 7
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
        0x10, // 0, 0, 0, 1, 0, 0, 0, 0,
        0x20, // 0, 0, 1, 0, 0, 0, 0, 0,
        0x40, // 0, 1, 0, 0, 0, 0, 0, 0,
        0x40, // 0, 1, 0, 0, 0, 0, 0, 0,
    },
    { // 8
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
        0x90, // 1, 0, 0, 1, 0, 0, 0, 0,
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
        0x90, // 1, 0, 0, 1, 0, 0, 0, 0,
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
    },
    { // 9
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
        0x90, // 1, 0, 0, 1, 0, 0, 0, 0,
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
        0x10, // 0, 0, 0, 1, 0, 0, 0, 0,
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
    },
    { // A
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
        0x90, // 1, 0, 0, 1, 0, 0, 0, 0,
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
        0x90, // 1, 0, 0, 1, 0, 0, 0, 0,
        0x90, // 1, 0, 0, 1, 0, 0, 0, 0,
    },
    { // B
        0xe0, // 1, 1, 1, 0, 0, 0, 0, 0,
        0x90, // 1, 0, 0, 1, 0, 0, 0, 0,
        0xe0, // 1, 1, 1, 0, 0, 0, 0, 0,
        0x90, // 1, 0, 0, 1, 0, 0, 0, 0,
        0xe0, // 1, 1, 1, 0, 0, 0, 0, 0,
    },
    { // C
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
        0x80, // 1, 0, 0, 0, 0, 0, 0, 0,
        0x80, // 1, 0, 0, 0, 0, 0, 0, 0,
        0x80, // 1, 0, 0, 0, 0, 0, 0, 0,
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
    },
    { // D
        0xe0, //1, 1, 1, 0, 0, 0, 0, 0,
        0x90, //1, 0, 0, 1, 0, 0, 0, 0,
        0x90, //1, 0, 0, 1, 0, 0, 0, 0,
        0x90, //1, 0, 0, 1, 0, 0, 0, 0,
        0xe0, //1, 1, 1, 0, 0, 0, 0, 0,
    },
    { // E
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
        0x80, // 1, 0, 0, 0, 0, 0, 0, 0,
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
        0x80, // 1, 0, 0, 0, 0, 0, 0, 0,
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
    },
    { // F
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
        0x80, // 1, 0, 0, 0, 0, 0, 0, 0,
        0xf0, // 1, 1, 1, 1, 0, 0, 0, 0,
        0x80, // 1, 0, 0, 0, 0, 0, 0, 0,
        0x80, // 1, 0, 0, 0, 0, 0, 0, 0,
    },
    // clang-format on
};

Core::Core(State &state) : _impl(make_unique<_Pimpl>(state)) {}
Core::~Core() = default;

void Core::fetch() { _impl->opcode = _impl->state.fetch(); }

Core::DecodedOperation Core::decode() { return {makeOpcode(_impl->opcode & 0xF000), _impl->opcode & 0x0FFF}; }

void Core::execute(DecodedOperation &op) { op.first(_impl->state, op.second); }
void Core::execute(DecodedOperation &&op) { op.first(_impl->state, op.second); }

}  // namespace chip8
